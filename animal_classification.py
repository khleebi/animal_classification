# -*- coding: utf-8 -*-
"""animal_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uu_RqISNgPPRiqJhUruUet2nY1629MlK
"""

import numpy as np
import tensorflow as tf

from sklearn.model_selection import train_test_split
from keras.utils import np_utils
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Dense, Flatten, Dropout
from tensorflow import keras


# import os
import matplotlib.pyplot as plt

dataset = np.load("trainbeg.npy")
label = np.load("trainLabels.npy").flatten()

x_train, x_test, y_train, y_test = train_test_split(dataset, label, test_size=0.2)
y_train = np_utils.to_categorical(y_train, 30)
y_test = np_utils.to_categorical(y_test, 30)

from keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(
    horizontal_flip=True,
    rotation_range=20,
    zoom_range=0.1,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.1,
    fill_mode="nearest"
)
datagen.fit(x_train)
train_generator = datagen.flow(x_train, y_train, batch_size=128)

model = Sequential()
model.add(Conv2D(input_shape=(64, 64, 3), filters=64, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(Conv2D(filters=64, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(Conv2D(filters=64, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Conv2D(filters=128, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Conv2D(filters=256, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3, 3), padding="same", activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

model.add(Flatten())
model.add(Dense(units=4096, activation="relu", kernel_regularizer="l2"))
model.add(Dropout(0.5))
model.add(Dense(units=1024, activation="relu", kernel_regularizer="l2"))
model.add(Dropout(0.5))
model.add(Dense(units=30, activation="softmax", kernel_regularizer="l1"))

model.summary()

optimizer = tf.keras.optimizers.SGD(learning_rate=0.001, momentum=0.8)
model.compile(loss="categorical_crossentropy", optimizer=optimizer, metrics=["accuracy"])

hist = model.fit(
    train_generator,
    validation_data=(x_test, y_test),
    steps_per_epoch=len(x_train) / 128,
    epochs=600,
)

plt.plot(hist.history["accuracy"])
plt.plot(hist.history['val_accuracy'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy", "Validation Accuracy"])
plt.show()

# save model
model.save("model.h5")

# load model
model = keras.models.load_model('model.h5')

results = model.evaluate(x_test, y_test, batch_size=128)
print("test loss, test acc:", results)

